/** * CS2210A Assignment 2 * @author Jameel Kaba (jkaba) Student #250796017 *  * This class creates a LinkedList of type LinearNode */public class LinkedList{	// private variable	private LinearNode<DictEntry> head;	/**	 * This constructor creates an empty LinkedList with the first	 * element being null	 */	public LinkedList()	{		this.head = null;	}	/**	 * Add method that adds the Word(node) to the list	 * @param addWord the word to be added	 * @return 1 if there is a word in its spot (collision) or	 * @return 0 if the word is the first in its position	 */	public int add(LinearNode<DictEntry> addWord){		// Create a LinearNode of DictEntry that refers to the first node		LinearNode<DictEntry> check = head;		// if the head of the list is null		if(this.head == null){			// Set the head to the LinearNode passed as a parameter			head = addWord;			// return 0 as no collision			return 0; 		}		else{			// While check has more nodes			while(check.getNext() != null){				// set check to the next node				check = check.getNext();			}			// set the next node in check to the element passed in the parameter			check.setNext(addWord);			// return 1 as there was a collision			return 1;		}	}	/**	 * Remove method that removes a node from the list	 * @param removeWord the Word(node) to be removed	 */	public void remove(LinearNode<DictEntry> removeWord){		// Set a LinearNode search that references the first node in the list		LinearNode<DictEntry> search = head;		// if the head is null		if(head == null){			// return nothing			return;		}		else{			// while search has more elements and is not null			while(search.getNext() != null){				// if the key that the next node in search references 				// is equal to the word we are trying to remove				if(search.getNext().getElement().getKey().equals(removeWord.getElement().getKey())){					// set the next element to null					search.setNext(null);				}			}		}	}	/**	 * Getter method that returns the node located at the head of the list	 * @return the head node	 */	public LinearNode<DictEntry> getHead(){		return this.head;	}	/**	 * Setter method that sets the head to the specified node	 * @param newHead the new Head node	 */	public void setHead(LinearNode<DictEntry> newHead){		head = newHead;	}}